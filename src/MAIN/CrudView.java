/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MAIN;

import DAO.ConnectionDAO;
import java.sql.Connection;
import java.awt.Component;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author tayon
 */
public class CrudView extends javax.swing.JFrame {

   
    public CrudView() {
        initComponents();
        loading2.setVisible(false);
        loading1.setVisible(false);
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        loading2 = new javax.swing.JLabel();
        loading1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        btnconsulta1 = new javax.swing.JButton();
        btnconsulta12 = new javax.swing.JButton();
        btnconsulta2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        loading2.setBackground(new java.awt.Color(255, 51, 51));
        loading2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/loading.gif"))); // NOI18N
        jPanel1.add(loading2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 190, 200, 70));

        loading1.setBackground(new java.awt.Color(255, 51, 51));
        loading1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/loading.gif"))); // NOI18N
        jPanel1.add(loading1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 200, 70));

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table2);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(464, 90, -1, 286));

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(table1);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 90, -1, 286));

        btnconsulta1.setText("Consulta 1");
        btnconsulta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnconsulta1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnconsulta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 49, -1, -1));

        btnconsulta12.setText("Consulta 1, 2");
        btnconsulta12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnconsulta12ActionPerformed(evt);
            }
        });
        jPanel1.add(btnconsulta12, new org.netbeans.lib.awtextra.AbsoluteConstraints(416, 14, -1, -1));

        btnconsulta2.setText("Consulta 2");
        btnconsulta2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnconsulta2ActionPerformed(evt);
            }
        });
        jPanel1.add(btnconsulta2, new org.netbeans.lib.awtextra.AbsoluteConstraints(651, 49, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 920, 380));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnconsulta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnconsulta1ActionPerformed
        loading1.setVisible(true);
        consulta1();
    }//GEN-LAST:event_btnconsulta1ActionPerformed

    private void btnconsulta2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnconsulta2ActionPerformed
        loading2.setVisible(true);
        consulta2();
    }//GEN-LAST:event_btnconsulta2ActionPerformed

    private void btnconsulta12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnconsulta12ActionPerformed
        loading1.setVisible(true);
        loading2.setVisible(true);
        consulta1();
        consulta2();
    }//GEN-LAST:event_btnconsulta12ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrudView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrudView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrudView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrudView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CrudView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnconsulta1;
    private javax.swing.JButton btnconsulta12;
    private javax.swing.JButton btnconsulta2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel loading1;
    private javax.swing.JLabel loading2;
    private javax.swing.JTable table1;
    private javax.swing.JTable table2;
    // End of variables declaration//GEN-END:variables

    private void consulta1() {

        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                Connection con = new ConnectionDAO().connectDB();
                String sql = "select * from Person.Address";
                System.out.println(sql);
                try {
                    PreparedStatement st = con.prepareStatement(sql);
                    ResultSet rs = st.executeQuery();

                    ResultSetMetaData rsmd = rs.getMetaData();
                    int columnCount = rsmd.getColumnCount();

                    String[] columnNames = new String[columnCount + 1];
                    columnNames[0] = " ";
                    for (int i = 1; i <= columnCount; i++) {
                        columnNames[i] = rsmd.getColumnName(i);
                    }

                    DefaultTableModel model = new DefaultTableModel(columnNames, 0);
                    table1.setModel(model);

                    int contador = 1;
                    while (rs.next()) {
                        Object[] row = new Object[columnCount + 1];
                        row[0] = contador++;
                        for (int i = 1; i <= columnCount; i++) {
                            row[i] = rs.getObject(i);
                        }
                        model.addRow(row);
                    }

                    for (int column = 0; column < table1.getColumnCount(); column++) {
                        TableColumn tableColumn = table1.getColumnModel().getColumn(column);
                        int preferredWidth = tableColumn.getMinWidth();
                        int maxWidth = tableColumn.getMaxWidth();

                        TableCellRenderer headerRenderer = table1.getTableHeader().getDefaultRenderer();
                        Component headerComp = headerRenderer.getTableCellRendererComponent(table1, tableColumn.getHeaderValue(), false, false, 0, column);
                        int headerWidth = headerComp.getPreferredSize().width;

                        for (int row = 0; row < table1.getRowCount(); row++) {
                            TableCellRenderer cellRenderer = table1.getCellRenderer(row, column);
                            Component c = table1.prepareRenderer(cellRenderer, row, column);
                            int width = c.getPreferredSize().width + table1.getIntercellSpacing().width;
                            preferredWidth = Math.max(preferredWidth, width);

                            if (preferredWidth >= maxWidth) {
                                preferredWidth = maxWidth;
                                break;
                            }
                        }

                        preferredWidth = Math.max(preferredWidth, headerWidth);

                        tableColumn.setPreferredWidth(preferredWidth);
                    }

                    table1.setAutoResizeMode(table1.AUTO_RESIZE_OFF);
                    con.close();
                } catch (SQLException ex) {
                    System.err.println("Error al ejecutar la consulta: " + ex.getMessage());

                }finally{
                loading1.setVisible(false);
                }
            }
        });
        thread1.start();

    }

    private void consulta2() {

        Thread thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                Connection con = new ConnectionDAO().connectDB();
                String sql = "select * from Person.Address";
                System.out.println(sql);
                try {
                    PreparedStatement st = con.prepareStatement(sql);
                    ResultSet rs = st.executeQuery();

                    ResultSetMetaData rsmd = rs.getMetaData();
                    int columnCount = rsmd.getColumnCount();

                    String[] columnNames = new String[columnCount + 1];
                    columnNames[0] = " ";
                    for (int i = 1; i <= columnCount; i++) {
                        columnNames[i] = rsmd.getColumnName(i);
                    }

                    DefaultTableModel model = new DefaultTableModel(columnNames, 0);
                    table2.setModel(model);

                    int contador = 1;
                    while (rs.next()) {
                        Object[] row = new Object[columnCount + 1];
                        row[0] = contador++;
                        for (int i = 1; i <= columnCount; i++) {
                            row[i] = rs.getObject(i);
                        }
                        model.addRow(row);
                    }

                    for (int column = 0; column < table2.getColumnCount(); column++) {
                        TableColumn tableColumn = table2.getColumnModel().getColumn(column);
                        int preferredWidth = tableColumn.getMinWidth();
                        int maxWidth = tableColumn.getMaxWidth();

                        TableCellRenderer headerRenderer = table2.getTableHeader().getDefaultRenderer();
                        Component headerComp = headerRenderer.getTableCellRendererComponent(table2, tableColumn.getHeaderValue(), false, false, 0, column);
                        int headerWidth = headerComp.getPreferredSize().width;

                        for (int row = 0; row < table2.getRowCount(); row++) {
                            TableCellRenderer cellRenderer = table2.getCellRenderer(row, column);
                            Component c = table2.prepareRenderer(cellRenderer, row, column);
                            int width = c.getPreferredSize().width + table2.getIntercellSpacing().width;
                            preferredWidth = Math.max(preferredWidth, width);

                            if (preferredWidth >= maxWidth) {
                                preferredWidth = maxWidth;
                                break;
                            }
                        }

                        preferredWidth = Math.max(preferredWidth, headerWidth);

                        tableColumn.setPreferredWidth(preferredWidth);
                    }

                    table2.setAutoResizeMode(table1.AUTO_RESIZE_OFF);
                    con.close();
                } catch (SQLException ex) {
                    System.err.println("Error al ejecutar la consulta: " + ex.getMessage());

                }finally{
                    loading2.setVisible(false);
                }
            }
        });thread2.start();

    }

}
